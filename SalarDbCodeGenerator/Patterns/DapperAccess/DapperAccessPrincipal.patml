<?xml version="1.0" encoding="utf-8" ?>
<PatternFile>
    <Name>Entity DapperAccess Object</Name>
    <Description>Entity DapperAccess objects pattern</Description>
    <Options
        Group="Database Model"
        AppliesTo="TablesAndViewsAll"
        Overwrite="true"
        FilePath="Entities\Principal\DapperAccessPrincipal.cs"
        Language="C#"
        />
    <BaseContent>
        <![CDATA[using System;
using System.Collections.Generic;
using System.Linq;
using Avalara.SafeFetch.Base;
using Dapper;
 
/*
 * 
 * THIS FILE IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MAKE CHANGES TO THIS FILE.
 * 
 * Generated by SalarDbCodeGenerator
 * https://github.com/ted-spence-avalara/TS_SalarDbCodeGenerator
 * 
 * To include or exclude classes from this file, launch the DbGen file and select or deselect tables from the database.
 * Do not add your own code in this file.  All classes in this file are marked "Partial", so you can easily extend them
 * by adding a separate "UserDap" file.
 * 
 */

namespace [:Namespace:].Entities
{
[#TablesAndViewsContent#]
}
]]>
    </BaseContent>

    <PatternContent Name="TablesAndViewsContent" ConditionKeyMode="TablesAndViewsAll">
        <BaseContent>[:InnerContent:]</BaseContent>
        <Condition Key="TheReplacement">
            <![CDATA[
    [#ClassDeclaration#]    
    {
        public [:TableName:]Dap(IDbConnectionFactory factory)
            : base(factory)
        {
        }

        public [:TableName:]Dap(BaseDap dapProvider) : 
            base(dapProvider)
        {
        }
        
        public override string GetSqlTableName()
        {
            return "[:TableOwnerNameAsPrefix:][:TableNameDb:]";
        }

        public IEnumerable<[:TableName:]> GetTop(int count)
        {
            return Query<[:TableName:]>(SqlGetTopCommand, new { top = count });
        }
        
        public IEnumerable<[:TableName:]> GetAll()
        {
            return Query<[:TableName:]>(SqlGetAllCommand);
        }
        
        public const string SqlGetTopCommand = "SELECT TOP (@top) * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock)";
        public const string SqlGetAllCommand = "SELECT * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock)";
        
[#UpdatableTable#]
[#ForeignKeys#]
[#IndexConstraintKeys#]
[#UniqueConstraintKeys#]
[#SqlCommands#]
      }
]]>
        </Condition>
        <ConditionContents>
            <PatternContent Name="ForeignKeys" ConditionKeyMode="FieldsForeignKeyAll">
                <Condition Key="MultiplicityOne">
                    <![CDATA[
        /// <summary>
        /// Foreign key multiplicity-one pattern
        /// </summary>
        public IEnumerable<[:LocalTableName:]> GetBy[:LocalFieldName:]([:LocalFieldDotNetType:] [:LocalFieldName:])
        {
            return Query<[:LocalTableName:]>(SqlGetBy[:LocalFieldName:]Command, new { [:LocalFieldName:] = [:LocalFieldNameParameter:] });
        }
        
        public const string SqlGetBy[:LocalFieldName:]Command = "SELECT * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock) WHERE [:LocalFieldNameDb:]=[:ProviderSPParamPrefix:][:LocalFieldName:]";
        ]]>
                </Condition>
                <Condition Key="MultiplicityMany">
                </Condition>
                <Condition Key="MultiplicityOneToOnePrimary">
                </Condition>
                <Condition Key="MultiplicityOneToOneForeign">
                </Condition>
            </PatternContent>

            <PatternContent Name="IndexConstraintKeys" ConditionKeyMode="TableIndexConstraint">
                <Condition Key="NormalKey">
                    <![CDATA[
        /// <summary>
        /// Index [:IndexName:] pattern
        /// </summary>
        public IEnumerable<[:TableName:]> GetBy[:IndexKeyName:]Index([:IndexKeyParameterList:])
        {
            return Query<[:TableName:]>(SqlGetBy[:IndexKeyName:]Command, new { [:IndexKeyParameterAssignments:] });
        }

        public const string SqlGetBy[:IndexKeyName:]Command = "SELECT * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock) WHERE [:IndexKeyMatchClause:]";
]]>
                </Condition>
            </PatternContent>

            <PatternContent Name="UniqueConstraintKeys" ConditionKeyMode="TableUniqueConstraint">
                <Condition Key="NormalKey">
                    <![CDATA[
        /// <summary>
        /// Unique constraint [:IndexName:] pattern
        /// </summary>
        public IEnumerable<[:TableName:]> GetBy[:IndexKeyName:]Index([:IndexKeyParameterList:])
        {
            return Query<[:TableName:]>(SqlGetBy[:IndexKeyName:]IndexCommand, new { [:IndexKeyParameterAssignments:] });
        }

        public const string SqlGetBy[:IndexKeyName:]IndexCommand = "SELECT * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock) WHERE [:IndexKeyMatchClause:]";
]]>
                </Condition>
            </PatternContent>

            <PatternContent Name="ClassDeclaration" ConditionKeyMode="TablePrimaryKey">
                <Condition Key="WithPrimaryKey">
                <![CDATA[public partial class [:TableName:]Dap : BaseDap, IDapWithPrimaryKey<[:PrimaryKeyDotNetType:],[:TableName:]>]]>
                </Condition>
                <Condition Key="ReadOnlyTable">
                    <![CDATA[public partial class [:TableName:]Dap : BaseDap]]>
                </Condition>
                <Condition Key="NoPrimaryKey">
                    <![CDATA[public partial class [:TableName:]Dap : BaseDap]]>
                </Condition>
            </PatternContent>

            <PatternContent Name="UpdatableTable" ConditionKeyMode="TablePrimaryKey">
                <Condition Key="ReadOnlyTable"></Condition>
                <Condition Key="NoPrimaryKey">
                    <![CDATA[
        public void Insert([:TableName:] model, int userid)
        {
            [#SetCreatedFields#]
            Execute(SqlInsertCommand, model);
        }

        public void Insert(IEnumerable<[:TableName:]> models, int userid)
        {
            foreach (var obj in models) {
                Insert(obj, userid);
            }
        }
        
        public override bool HasPrimaryKey()
        {
            return false;
        }

        public override string GetPrimaryKeyFieldName()
        {
            return null;
        }]]>
                </Condition>
                <Condition Key="WithPrimaryKey">
                    <![CDATA[
[#GetPrimaryKey#]
        public void Insert([:TableName:] model, int userid)
        {
            InsertWithId(model, userid);
        }

        public void Insert(IEnumerable<[:TableName:]> models, int userid)
        {
            foreach (var obj in models) {
                InsertWithId(obj, userid);
            }
        }

        /// <summary>
        /// Insert this record and return the [:PrimaryKeyName:] from OUTPUT inserted.
        /// </summary>
        /// <returns>[:PrimaryKeyName:] from OUTPUT inserted.</returns>
        public [:PrimaryKeyDotNetType:] InsertWithId([:TableName:] model, int userid)
        {
            [#SetCreatedFields#]
            var result = Query<[:PrimaryKeyDotNetType:]>(SqlInsertWithIdCommand, model);
            model.[:PrimaryKeyName:] = ([:PrimaryKeyDotNetType:])result.FirstOrDefault();
            return model.[:PrimaryKeyName:];
        }
        
        public void InsertWithId(IEnumerable<[:TableName:]> models, int userid)
        {
            foreach (var obj in models) {
                InsertWithId(obj, userid);
            }
        }
        
        public void Delete([#PrimaryKeyListAsArguments#])
        {
            var id_props = new { [#PrimaryKeyListAsCodeProps#] };
            long rows_affected = Query<long>(SqlDeleteCommand, id_props).FirstOrDefault();
            if (rows_affected != 1) throw new DbRecordNotFound("Delete", "[:TableName:]", id_props);
        }

        public void Update([:TableName:] model, int userid)
        {
            [#SetModifiedFields#]
            long rows_affected = Query<long>(SqlUpdateCommand, model).FirstOrDefault();
            if (rows_affected != 1) throw new DbRecordNotFound("Update", "[:TableName:]", model);
        }

        public void Update(IEnumerable<[:TableName:]> models, int userid)
        {
            foreach (var obj in models) {
                Update(obj, userid);
            }
        }
        
        public override bool HasPrimaryKey()
        {
            return true;
        }

        public override string GetPrimaryKeyFieldName()
        {
            return "[:PrimaryKeyName:]";
        }
        ]]>
                </Condition>

                <ConditionContents>
                    <PatternContent Name="SetCreatedFields" ConditionKeyMode="FieldsKeyTypeAll">
                        <Condition Key="FieldsKeyNameMatch" MatchValue="CreatedUserId">
                            <![CDATA[
            model.CreatedUserId = userid;]]>
                        </Condition>
                        <Condition Key="FieldsKeyNameMatch" MatchValue="CreatedDate">
                            <![CDATA[
            model.CreatedDate = DateTime.UtcNow;]]>
                        </Condition>
                        <Condition Key="FieldsKeyNameMatch" MatchValue="ModifiedUserId">
                            <![CDATA[
            model.ModifiedUserId = userid;]]>
                        </Condition>
                        <Condition Key="FieldsKeyNameMatch" MatchValue="ModifiedDate">
                            <![CDATA[
            model.ModifiedDate = DateTime.UtcNow;]]>
                        </Condition>
                    </PatternContent>
                    <PatternContent Name="SetModifiedFields" ConditionKeyMode="FieldsKeyTypeAll">
                        <Condition Key="FieldsKeyNameMatch" MatchValue="ModifiedUserId">
                            <![CDATA[
            model.ModifiedUserId = userid;]]>
                        </Condition>
                        <Condition Key="FieldsKeyNameMatch" MatchValue="ModifiedDate">
                            <![CDATA[
            model.ModifiedDate = DateTime.UtcNow;]]>
                        </Condition>
                    </PatternContent>
                    <PatternContent Name="GetPrimaryKey" ConditionKeyMode="FieldsKeyTypeAll">
                        <ItemsSeperator></ItemsSeperator>
                        <Condition Key="OneToOnePrimaryKey">
                            <![CDATA[
        /// <summary>
        /// One to One primary key pattern
        /// </summary>
        public [:TableName:] GetByPrimaryKey([:FieldDotNetType:] id)
        {
            return GetBy[:FieldName:](id);
        }
        
        public [:TableName:] GetBy[:FieldName:]([:FieldDotNetType:] [:FieldName:])
        {
            return Query<[:TableName:]>(SqlGetBy[:FieldName:]Command, new { [:FieldName:] = [:FieldName:] }).FirstOrDefault();
        }
        
        public const string SqlGetBy[:FieldName:]Command = "SELECT * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock) WHERE [:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldName:]";
]]>
                        </Condition>
                        <Condition Key="OneToOneForeignKey">
                            <![CDATA[
        /// <summary>
        /// One to One foreign key pattern
        /// </summary>
        public [:TableName:] GetByPrimaryKey([:FieldDotNetType:] id)
        {
            return GetBy[:FieldName:](id);
        }
        
        public [:TableName:] GetBy[:FieldName:]([:FieldDotNetType:] [:FieldName:])
        {
            return Query<[:TableName:]>(SqlGetBy[:FieldName:]Command, new { [:FieldName:] = [:FieldName:] }).FirstOrDefault();
        }
        
        public const string SqlGetBy[:FieldName:]Command = "SELECT * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock) WHERE [:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldName:]";
]]>
                        </Condition>
                        <Condition Key="AutoIncrementPrimaryKey">
                            <![CDATA[
        /// <summary>
        /// Auto Increment primary key pattern
        /// </summary>
        public [:TableName:] GetByPrimaryKey([:FieldDotNetType:] id)
        {
            return GetBy[:FieldName:](id);
        }

        public [:TableName:] GetBy[:FieldName:]([:FieldDotNetType:] [:FieldName:])
        {
            return Query<[:TableName:]>(SqlGetBy[:FieldName:]Command, new { [:FieldName:] = [:FieldName:] }).FirstOrDefault();
        }
        
        public const string SqlGetBy[:FieldName:]Command = "SELECT * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock) WHERE [:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldName:]";
]]>
                        </Condition>
                        <Condition Key="AutoIncrement"></Condition>
                        <Condition Key="AutoIncNativeNullable"></Condition>
                        <Condition Key="AutoIncNullableType"></Condition>
                        <Condition Key="PrimaryKey">
                            <![CDATA[
        /// <summary>
        /// Basic primary key pattern
        /// </summary>
        public [:TableName:] GetByPrimaryKey([:FieldDotNetType:] id)
        {
            return GetBy[:FieldName:](id);
        }

        public [:TableName:] GetBy[:FieldName:]([:FieldDotNetType:] [:FieldName:])
        {
            return Query<[:TableName:]>(SqlGetBy[:FieldName:]Command, new { [:FieldName:] = [:FieldName:] }).FirstOrDefault();
        }
        
        public const string SqlGetBy[:FieldName:]Command = "SELECT * FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WITH (nolock) WHERE [:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldName:]";
]]>
                        </Condition>
                        <Condition Key="NormalField"></Condition>
                        <Condition Key="NativeNullable"></Condition>
                        <Condition Key="NullableType"></Condition>
                    </PatternContent>

                    <PatternContent Name="PrimaryKeyListAsCodeProps" ConditionKeyMode="FieldsKeyTypeAll">
                        <ItemsSeperator>
                            <![CDATA[, ]]>
                        </ItemsSeperator>
                        <Condition Key="OneToOnePrimaryKey">
                            <![CDATA[[:FieldName:] = [:FieldName:]]]>
                        </Condition>
                        <Condition Key="OneToOneForeignKey">
                            <![CDATA[[:FieldName:] = [:FieldName:]]]>
                        </Condition>
                        <Condition Key="AutoIncrementPrimaryKey">
                            <![CDATA[[:FieldName:] = [:FieldName:]]]>
                        </Condition>
                        <Condition Key="AutoIncrement"></Condition>
                        <Condition Key="AutoIncNativeNullable"></Condition>
                        <Condition Key="AutoIncNullableType"></Condition>
                        <Condition Key="PrimaryKey">
                            <![CDATA[[:FieldName:] = [:FieldName:]]]>
                        </Condition>
                        <Condition Key="NormalField"></Condition>
                        <Condition Key="NativeNullable"></Condition>
                        <Condition Key="NullableType"></Condition>
                    </PatternContent>

                    <PatternContent Name="PrimaryKeyListAsArguments" ConditionKeyMode="FieldsKeyTypeAll">
                        <ItemsSeperator>
                            <![CDATA[, ]]>
                        </ItemsSeperator>
                        <Condition Key="OneToOnePrimaryKey">
                            <![CDATA[[:FieldDotNetType:] [:FieldName:]]]>
                        </Condition>
                        <Condition Key="OneToOneForeignKey">
                            <![CDATA[[:FieldDotNetType:] [:FieldName:]]]>
                        </Condition>
                        <Condition Key="AutoIncrementPrimaryKey">
                            <![CDATA[[:FieldDotNetType:] [:FieldName:]]]>
                        </Condition>
                        <Condition Key="AutoIncrement"></Condition>
                        <Condition Key="AutoIncNativeNullable"></Condition>
                        <Condition Key="AutoIncNullableType"></Condition>
                        <Condition Key="PrimaryKey">
                            <![CDATA[[:FieldDotNetType:] [:FieldName:]]]>
                        </Condition>
                        <Condition Key="NormalField"></Condition>
                        <Condition Key="NativeNullable"></Condition>
                        <Condition Key="NullableType"></Condition>
                    </PatternContent>
                </ConditionContents>
            </PatternContent>

            <PatternContent Name="SqlCommands" ConditionKeyMode="TablePrimaryKey">
                <Condition Key="ReadOnlyTable">
                </Condition>
                <Condition Key="NoPrimaryKey">
                  <![CDATA[
        public const string SqlInsertCommand = "INSERT INTO [:TableOwnerNameAsPrefix:][:TableNameDb:] ([#InsertParametersName#]) VALUES ([#InsertParametersValue#]) ";
        ]]>
                </Condition>
                <Condition Key="WithPrimaryKey">
                    <![CDATA[
        public const string SqlInsertCommand = "INSERT INTO [:TableOwnerNameAsPrefix:][:TableNameDb:] ([#InsertParametersName#]) VALUES ([#InsertParametersValue#]) ";
        public const string SqlUpdateCommand = "UPDATE [:TableOwnerNameAsPrefix:][:TableNameDb:] SET [#UpdateParameters#] WHERE [#PrimaryKeyParameters#]; SELECT @@ROWCOUNT;";
        public const string SqlDeleteCommand = "DELETE FROM [:TableOwnerNameAsPrefix:][:TableNameDb:] WHERE [#PrimaryKeyParameters#]; SELECT @@ROWCOUNT;";
        public const string SqlInsertWithIdCommand = "INSERT INTO [:TableOwnerNameAsPrefix:][:TableNameDb:] ([#InsertParametersName#]) VALUES ([#InsertParametersValue#]) [:InsertWithIdSuffix:] SELECT scope_identity();";
        ]]>
                </Condition>
                <ConditionContents>
                    <PatternContent Name="InsertParametersName" ConditionKeyMode="FieldsKeyTypeAll">
                        <ItemsSeperator>
                            <![CDATA[ , ]]>
                        </ItemsSeperator>
                        <Condition Key="OneToOnePrimaryKey"></Condition>
                        <Condition Key="OneToOneForeignKey"><![CDATA[[:FieldNameDbEscaped:]]]></Condition>
                        <Condition Key="AutoIncrementPrimaryKey"></Condition>
                        <Condition Key="AutoIncrement"></Condition>
                        <Condition Key="AutoIncNativeNullable"></Condition>
                        <Condition Key="AutoIncNullableType"></Condition>
                        <Condition Key="PrimaryKey"><![CDATA[[:FieldNameDbEscaped:]]]></Condition>
                        <Condition Key="NormalField"><![CDATA[[:FieldNameDbEscaped:]]]></Condition>
                        <Condition Key="NativeNullable"><![CDATA[[:FieldNameDbEscaped:]]]></Condition>
                        <Condition Key="NullableType"><![CDATA[[:FieldNameDbEscaped:]]]></Condition>
                    </PatternContent>

                    <PatternContent Name="InsertParametersValue" ConditionKeyMode="FieldsKeyTypeAll">
                        <ItemsSeperator>
                            <![CDATA[ , ]]>
                        </ItemsSeperator>
                        <Condition Key="OneToOnePrimaryKey"></Condition>
                        <Condition Key="OneToOneForeignKey"><![CDATA[[:ProviderSPParamPrefix:][:FieldName:]]]></Condition>
                        <Condition Key="AutoIncrementPrimaryKey"></Condition>
                        <Condition Key="AutoIncrement"></Condition>
                        <Condition Key="AutoIncNativeNullable"></Condition>
                        <Condition Key="AutoIncNullableType"></Condition>
                        <Condition Key="PrimaryKey"><![CDATA[[:ProviderSPParamPrefix:][:FieldName:]]]></Condition>
                        <Condition Key="NormalField"><![CDATA[[:ProviderSPParamPrefix:][:FieldName:]]]></Condition>
                        <Condition Key="NativeNullable"><![CDATA[[:ProviderSPParamPrefix:][:FieldName:]]]></Condition>
                        <Condition Key="NullableType"><![CDATA[[:ProviderSPParamPrefix:][:FieldName:]]]></Condition>
                    </PatternContent>

                    <PatternContent Name="UpdateParameters" ConditionKeyMode="FieldsKeyTypeAll">
                        <ItemsSeperator>
                            <![CDATA[ , ]]>
                        </ItemsSeperator>
                        <Condition Key="OneToOnePrimaryKey"></Condition>
                        <Condition Key="FieldsKeyNameMatch" MatchValue="CreatedUserId"></Condition>
                        <Condition Key="FieldsKeyNameMatch" MatchValue="CreatedDate"></Condition>
                        <Condition Key="OneToOneForeignKey"><![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldNameDb:]]]></Condition>
                        <Condition Key="AutoIncrementPrimaryKey"></Condition>
                        <Condition Key="AutoIncrement"></Condition>
                        <Condition Key="AutoIncNativeNullable"></Condition>
                        <Condition Key="AutoIncNullableType"></Condition>
                        <Condition Key="PrimaryKey"><![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldNameDb:]]]></Condition>
                        <Condition Key="NormalField"><![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldNameDb:]]]></Condition>
                        <Condition Key="NativeNullable"><![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldNameDb:]]]></Condition>
                        <Condition Key="NullableType"><![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldNameDb:]]]></Condition>
                    </PatternContent>

                    <PatternContent Name="PrimaryKeyParameters" ConditionKeyMode="FieldsKeyTypeAll">
                        <ItemsSeperator>
                            <![CDATA[ AND ]]>
                        </ItemsSeperator>
                        <Condition Key="OneToOnePrimaryKey">
                            <![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldName:]]]>
                        </Condition>
                        <Condition Key="OneToOneForeignKey">
                            <![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldName:]]]>
                        </Condition>
                        <Condition Key="AutoIncrementPrimaryKey">
                            <![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldName:]]]>
                        </Condition>
                        <Condition Key="AutoIncrement"></Condition>
                        <Condition Key="AutoIncNativeNullable"></Condition>
                        <Condition Key="AutoIncNullableType"></Condition>
                        <Condition Key="PrimaryKey">
                            <![CDATA[[:FieldNameDbEscaped:]=[:ProviderSPParamPrefix:][:FieldName:]]]>
                        </Condition>
                        <Condition Key="NormalField"></Condition>
                        <Condition Key="NativeNullable"></Condition>
                        <Condition Key="NullableType"></Condition>
                    </PatternContent>
                </ConditionContents>
            </PatternContent>
        </ConditionContents>
    </PatternContent>
</PatternFile>
